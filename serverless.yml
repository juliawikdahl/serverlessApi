service: bonz-booking-api

frameworkVersion: '3' 

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/bookings

functions:
  createBooking:
    handler: handler.createBooking
    events:
      - httpApi:
          path: /bookings
          method: post
          cors: true 

  getBooking:
    handler: handler.getBooking
    events:
      - httpApi:
          path: /bookings/{id}
          method: get
          cors: true

  cancelBooking:
    handler: handler.cancelBooking
    events:
      - httpApi:
          path: /bookings/{id}/cancel
          method: delete
          cors: true

  updateBooking:
    handler: handler.updateBooking
    events:
      - httpApi:
          path: /bookings/{id}
          method: put
          cors: true

  listBookings:
    handler: handler.listBookings
    events:
      - httpApi:
          path: /bookings
          method: get
          cors: true

resources:
  Resources:
    BookingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bookings
        AttributeDefinitions:
          - AttributeName: bookingId
            AttributeType: S
        KeySchema:
          - AttributeName: bookingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

plugins:
  - serverless-offline 

custom:
  serverless-offline:
    httpPort: 3000 
